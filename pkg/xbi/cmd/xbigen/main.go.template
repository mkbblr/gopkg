package main

import (
    "fmt"
    "os"
    "flag"
    "testing"
    "github.com/mkbblr/gopkg/pkg/xbi"
)

//var gitStatus string = `%X_BI_KEY_GIT_STATUS%`
//var gitOrigin string = `%X_BI_KEY_GIT_ORIGIN%`
//var buildPath string = `%X_BI_KEY_BUILD_PATH%`
//var buildTime string = `%X_BI_KEY_BUILD_TIME%`
//var buildHost string = `%X_BI_KEY_BUILD_HOST%`
//var buildUser string = `%X_BI_KEY_BUILD_USER%`

var xbiKV string = `%X_BI_KEY_KV_PAIR%`


var _bi *xbi.XBI 

func init()  {
	//fmt.Println("main.init called, build information: ")
	_bi := xbi.NewBuildInfo(
		//xbi.WithItem(gitOrigin),
		//xbi.WithItem(gitStatus),
		//xbi.WithItem(buildTime),
		//xbi.WithItem(buildPath),
		//xbi.WithItem(buildHost),
		//xbi.WithItem(buildUser),
		xbi.WithItem(xbiKV),
		)
	testing.Init()
	//fmt.Println(_bi.Oneliner())

	show := flag.Bool("show", false, "show json build information")
	jsonbi := flag.Bool("jsonbi", false, "show json build information")
	fullbi := flag.Bool("fullbi", false, "show full build information")
	onelinebi := flag.Bool("onelinebi", false, "show oneliner build information")

	flag.Parse()

	if *fullbi {
        fmt.Print(_bi.Text())
		os.Exit(0)
	}

	if *jsonbi || *show {
        fmt.Print(_bi.Json())
		os.Exit(0)
	}

	if *onelinebi {
		fmt.Println(_bi.Oneliner())
		os.Exit(0)
	}

}