package main

import (
    "fmt"
    "os"
    "flag"
    //"testing"
    "github.com/mkbblr/gopkg/pkg/xbi"
)

//var gitStatus string = `%X_BI_KEY_GIT_STATUS%`
//var gitOrigin string = `%X_BI_KEY_GIT_ORIGIN%`
//var buildPath string = `%X_BI_KEY_BUILD_PATH%`
//var buildTime string = `%X_BI_KEY_BUILD_TIME%`
//var buildHost string = `%X_BI_KEY_BUILD_HOST%`
//var buildUser string = `%X_BI_KEY_BUILD_USER%`

var xbiKV string = `%X_BI_KEY_KV_PAIR%`
var _bi *xbi.XBI 

var _flagShow bool
var _flagJson bool
var _flagFull bool
var _flagOneline bool

func init()  {
	_bi := xbi.NewBuildInfo(
		//xbi.WithItem(gitOrigin),
		//xbi.WithItem(gitStatus),
		//xbi.WithItem(buildTime),
		//xbi.WithItem(buildPath),
		//xbi.WithItem(buildHost),
		//xbi.WithItem(buildUser),
		xbi.WithItem(xbiKV),
		)

	flag.BoolVar(&_flagShow, "show", false, "show json build information")
	flag.BoolVar(&_flagJson, "jsonbi", false, "show json build information")
	flag.BoolVar(&_flagFull, "fullbi", false, "show full build information")
	flag.BoolVar(&_flagOneline, "onelinebi", false, "show oneliner build information")

	if len(os.Args) > 1 {
		switch  {
		case os.Args[1] == "-show" || os.Args[1] == "-json":
			fmt.Print(_bi.Json())
			os.Exit(0)

		case os.Args[1] == "-fullbi":
			fmt.Print(_bi.Text())
			os.Exit(0)

		case os.Args[1] == "-onelinebi":
			fmt.Print(_bi.Text())
			os.Exit(0)
		}
	}
}