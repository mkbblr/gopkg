package main

import (
    "fmt"
    "os"
    "flag"
    //"testing"
    "github.com/mkbblr/gopkg/pkg/xbi"
)

//var gitStatus string = `%X_BI_KEY_GIT_STATUS%`
//var gitOrigin string = `%X_BI_KEY_GIT_ORIGIN%`
//var buildPath string = `%X_BI_KEY_BUILD_PATH%`
//var buildTime string = `%X_BI_KEY_BUILD_TIME%`
//var buildHost string = `%X_BI_KEY_BUILD_HOST%`
//var buildUser string = `%X_BI_KEY_BUILD_USER%`

var xbiKV string = `%X_BI_KEY_KV_PAIR%`
var _bi *xbi.XBI 

var (
	_flagBi bool
	_flagJson bool
	_flagText bool
	_flagOneline bool
)

func customFlagParse() {
	for _, arg := range os.Args {
		switch  {
		case arg == "-bi":
			_flagBi = true
		case arg == "-json":
			_flagJson = true
		case arg == "-text":
			_flagText = true
		case arg == "-oneline":
			_flagOneline = true
		}		
	}
}


func init()  {
	_bi := xbi.NewBuildInfo(
		xbi.WithItem(xbiKV),
		)

	flag.BoolVar(&_flagBi, "bi", false, "Print build information")
	flag.BoolVar(&_flagJson, "json", false, "Print build information in json format")
	flag.BoolVar(&_flagText, "text", false, " use tex format")
	flag.BoolVar(&_flagOneline, "onelinebi", false, "Print a minimal online build information")


	customFlagParse()
	if _flagBi == true {

		switch {
			case _flagJson == true:
				fmt.Print(_bi.Json())
			case _flagOneline == true:
				fmt.Print(_bi.Oneliner())
			default:
				fmt.Print(_bi.Text())	
		}
		os.Exit(0)
	}


	
}