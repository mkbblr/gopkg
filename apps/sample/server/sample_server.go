package server

import (
	"database/sql"
	"fmt"
	"net/http"

	_ "github.com/mkbblr/gopkg/apps/sample/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger/v2"
)

type SampleServer struct {
}

func (s *SampleServer) Run(schema, host string, port int) {
	// fmt.Println("SampleServer.Run: begin")

	mux := http.NewServeMux()

	docUrl := fmt.Sprintf("%s://%s:%d/doc.json", schema, host, port)
	// both "/" & "/doc" should be added to make "/doc/index.html" work, need to check why
	mux.Handle("/", s.doc(docUrl))
	mux.Handle("/doc/*", s.doc(docUrl))

	// add the actual api
	mux.Handle("/sign", s.authenticate(s.check(nil)))

	addr := fmt.Sprintf("%s:%d", host, port)
	indexPageURL := fmt.Sprintf("%s://%s:%d/doc/index.html", schema, host, port)

	fmt.Printf("\n Server address: %s\n Documentation link: %s \n\n", addr, indexPageURL)

	http.ListenAndServe(addr, mux)
	// fmt.Println("SampleServer.Run: end")
}

func (s *SampleServer) authenticate(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// fmt.Println("authenticate: success !!!")
		w.Write([]byte("auth success\n"))
		if next != nil {
			next.ServeHTTP(w, r)
		}
	})
}

func (s *SampleServer) doc(url string) http.Handler {
	return httpSwagger.Handler(
		httpSwagger.URL(url), //The url pointing to API definition
	)
}

// Sample API Response
// @Description Sample API response model
// @Description with user id and username
type SampleResponse struct {
	ID      int            `json:"id"`
	Name    string         `json:"name"`
	Email   string         `json:"email"`
	Phone   string         `json:"phone"`
	Address string         `json:"address"`
	UN      sql.NullString `json:"user_num" swaggertype:"string"`
} //@name response.Body

// check ... check sample data
// @Summary	check api
// @Description	Check and verify sample data
// @Success 200 {array} SampleResponse
// @Failure 404 {object} object
// @Router /check [post]
func (s *SampleServer) check(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// fmt.Println("check: success !!!")
		if next != nil {
			next.ServeHTTP(w, r)
		}
	})
}
